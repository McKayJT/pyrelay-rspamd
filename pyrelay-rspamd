#!/usr/bin/env python
from aiosmtpd.smtp import SMTP
import aiosmtplib
import aiohttp
import asyncio
import configparser
import email
import email.policy
import functools
import logging
import logging.handlers
import signal
import socket
import sys
import traceback


class Handler:
    def __init__(self, clientsession):
        self._session = clientsession

    async def handle_DATA(self, server, session, envelope):
        message = envelope.original_content
        r = await self._session.post(config['RELAY'].get('rspamd', 'http://localhost:11333/checkv2'),
                                     data=message, headers=dict(config.items('HEADERS')))
        j = await r.json()

        if 'dkim-signature' not in j:
            msg = email.message_from_string(
                message, policy=email.policy.SMTPUTF8)
            logging.warning('rspamd did not return a signature for message {}'.format(
                msg.get('Message-ID', '(Message-ID not found)')))
        else:
            headers = list()
            if isinstance(j['dkim-signature'], str):
                headers.append(b'DKIM-Signature: ')
                headers.append(j['dkim-signature'].encode('ascii'))
                headers.append(b'\r\n')
            else:
                for sig in j['dkim-signature']:
                    headers.append(b'DKIM-Signature: ')
                    headers.append(sig.encode('ascii'))
                    headers.append(b'\r\n')
            headers.append(message)
        async with aiosmtplib.SMTP(hostname=config['RELAY'].get('forward', 'localhost'),
                                   port=config['RELAY'].get('fport', 2525)) as s:
            await s.sendmail(envelope.mail_from, envelope.rcpt_tos, b''.join(headers),
                             mail_options=envelope.mail_options, rcpt_options=envelope.rcpt_options)

        return '250 Message Get'

    async def handle_exception(self, err):
        logging.error("Unable to relay message: {}".format(err))
        logging.debug("traceback: {}".format(traceback.format_exc()))
        return "554 Unable to relay mail"


def stop(server):
    logging.info("Shutting down pyrelay-rspamd")
    server.close()


async def start(host, port):
    loop = asyncio.get_running_loop()
    session = aiohttp.ClientSession()
    handler = Handler(session)
    factory = functools.partial(SMTP, handler, enable_SMTPUTF8=True)
    server = await loop.create_server(factory, host=host, port=port)
    for sig in {signal.SIGTERM, signal.SIGINT}:
        loop.add_signal_handler(sig, functools.partial(stop, server))
    try:
        await server.serve_forever()
    except asyncio.CancelledError:
        return
    finally:
        await session.close()

global config
if len(sys.argv) < 2:
    print("No configuration file specified", file=os.stderr)
    sys.exit(2)
config = configparser.ConfigParser()
try:
    config.read_file(open(sys.argv[1]))
except configparser.Error as err:
    print("Unable to parse configuration: {}".format(err), file=os.stderr)
    sys.exit(2)

if 'LOG' in config:
    logger = logging.getLogger()
    log_type = config['LOG'].get('type')
    if log_type == 'syslog':
        handler = logging.handlers.SysLogHandler(
            facility='mail', address='/dev/log')
    elif log_type == 'none':
        handler = logging.NullHandler(),
    elif log_type == 'file':
        handler = logging.handlers.TimedRotatingFileHandler(
            config['LOG'].get('file', 'pyrelay-rspamd.log'), when='midnight')
    else:
        handler = logging.StreamHandler()

    if isinstance(handler, logging.handlers.SysLogHandler):
        handler.ident = "pyrelay-rspamd: "
    else:
        fmt = logging.Formatter(
            fmt='{asctime}:{levelname}: {message}', style='{')
        handler.setFormatter(fmt)
    logger.addHandler(handler)
    logger.setLevel(config['LOG'].get('level', 'INFO'))
else:
    logging.basicConfig()

logging.info("Starting pyrelay-rspamd")
asyncio.run(start(config['RELAY'].get('listen', 'localhost'),
                  int(config['RELAY'].get('port', 8383))))
